{"version":3,"file":"sappaylib.cjs.development.js","sources":["../src/authentication.ts","../src/configuration.ts","../src/defaultConfiguration.ts","../src/http/xmlSerialization.ts","../src/client.ts","../src/models/checkoutPayload.ts","../src/models/customer.ts","../src/models/invoice.ts","../src/controllers/baseController.ts","../src/controllers/apiController.ts"],"sourcesContent":["/**\n * SAPPAYLib\n *\n */\n\nimport { AUTHORIZATION_HEADER, setHeader } from './core';\nimport { passThroughInterceptor } from './core';\nimport { AuthenticatorInterface } from './core';\n\n/** None authentication provider */\nexport const noneAuthenticationProvider = () => passThroughInterceptor;\n\nexport const accessTokenAuthenticationProvider = ({\n  accessToken,\n}: {\n  accessToken: string;\n}): AuthenticatorInterface<boolean> => {\n  return (requiresAuth?: boolean) => {\n    if (!requiresAuth) {\n      return passThroughInterceptor;\n    }\n\n    return (request, options, next) => {\n      request.headers = request.headers ?? {};\n      setHeader(request.headers, AUTHORIZATION_HEADER, `Basic ${accessToken}`);\n\n      return next(request, options);\n    };\n  };\n};\n","/**\n * SAPPAYLib\n *\n */\n\nimport { HttpClientOptions } from './core';\nimport { Credentials } from './models/credentials';\n\n/** An interface for all configuration parameters required by the SDK. */\nexport interface Configuration {\n  credentials?: Credentials;\n  timeout: number;\n  environment: Environment;\n  accessToken: string;\n  httpClientOptions?: Partial<HttpClientOptions>;\n  unstable_httpClientOptions?: any;\n}\n\n/** Environments available for API */\nexport enum Environment {\n  Production = 'production',\n  Development = 'development',\n}\n","/**\n * SAPPAYLib\n *\n */\n\nimport { Configuration, Environment } from './configuration';\nimport { RetryConfiguration } from './core';\n\n/** Default values for the configuration parameters of the client. */\nexport const DEFAULT_CONFIGURATION: Configuration = {\n  timeout: 0,\n  environment: Environment.Production,\n  accessToken: '',\n};\n\n/** Default values for retry configuration parameters. */\nexport const DEFAULT_RETRY_CONFIG: RetryConfiguration = {\n  maxNumberOfRetries: 0,\n  retryOnTimeout: true,\n  retryInterval: 1,\n  maximumRetryWaitTime: 0,\n  backoffFactor: 2,\n  httpStatusCodesToRetry: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],\n  httpMethodsToRetry: ['GET', 'PUT'],\n};\n","/**\n * SAPPAYLib\n *\n */\n\nexport class XmlSerialization {\n  public xmlSerialize(_rootName: string, _value: unknown): string {\n    throw new Error('XML serialization is not available.');\n  }\n\n  public xmlDeserialize(_rootName: string, _xmlString: string): Promise<any> {\n    throw new Error('XML deserialization is not available.');\n  }\n}\n","/**\n * SAPPAYLib\n *\n */\n\nimport { accessTokenAuthenticationProvider } from './authentication';\nimport {\n  AuthParams,\n  ClientInterface,\n  SdkRequestBuilder,\n  SdkRequestBuilderFactory,\n  Server,\n} from './clientInterface';\nimport { Configuration, Environment } from './configuration';\nimport {\n  DEFAULT_CONFIGURATION,\n  DEFAULT_RETRY_CONFIG,\n} from './defaultConfiguration';\nimport { ApiError } from './core';\nimport {\n  AuthenticatorInterface,\n  createRequestBuilderFactory,\n  HttpClient,\n  HttpClientInterface,\n  RetryConfiguration,\n  XmlSerializerInterface,\n} from './core';\nimport { XmlSerialization } from './http/xmlSerialization';\nimport { Credentials } from './models/credentials';\nrequire('dotenv').config();\n\nconst USER_AGENT = 'APIMATIC 3.0';\n\nexport class Client implements ClientInterface {\n  private _config: Readonly<Configuration>;\n  private _timeout: number;\n  private _retryConfig: RetryConfiguration;\n  private _requestBuilderFactory: SdkRequestBuilderFactory;\n\n  constructor(config?: Partial<Configuration>) {\n    this._config = {\n      ...DEFAULT_CONFIGURATION,\n      ...config,\n    };\n    this._retryConfig = {\n      ...DEFAULT_RETRY_CONFIG,\n      ...this._config.httpClientOptions?.retryConfig,\n    };\n    this._timeout =\n      typeof this._config.httpClientOptions?.timeout != 'undefined'\n        ? this._config.httpClientOptions.timeout\n        : this._config.timeout;\n    this._requestBuilderFactory = createRequestHandlerFactory(\n      (server) => getBaseUri(server, this._config),\n      accessTokenAuthenticationProvider(this._config),\n      new HttpClient({\n        timeout: this._timeout,\n        clientConfigOverrides: this._config.unstable_httpClientOptions,\n        httpAgent: this._config.httpClientOptions?.httpAgent,\n        httpsAgent: this._config.httpClientOptions?.httpsAgent,\n      }),\n      [withErrorHandlers, withUserAgent, withAuthenticationByDefault],\n      new XmlSerialization(),\n      this._retryConfig\n    );\n  }\n\n  public getRequestBuilderFactory(): SdkRequestBuilderFactory {\n    return this._requestBuilderFactory;\n  }\n\n  public getCreds(): Credentials {\n    if (this._config.credentials) {\n      return this._config.credentials;\n    }\n    throw new Error('Credentials not found');\n  }\n\n  /**\n   * Clone this client and override given configuration options\n   */\n  public withConfiguration(config: Partial<Configuration>) {\n    return new Client({ ...this._config, ...config });\n  }\n}\n\nfunction createHttpClientAdapter(client: HttpClient): HttpClientInterface {\n  return async (request, requestOptions) => {\n    return await client.executeRequest(request, requestOptions);\n  };\n}\n\nfunction getBaseUri(server: Server = 'default', config: Configuration): string {\n  if (config.environment === Environment.Production) {\n    if (server === 'default') {\n      return 'https://api.prod.sappay.net/';\n    }\n    if (server === 'DURL') {\n      return 'https://api.stg.sappay.net/';\n    }\n  }\n  if (config.environment === Environment.Development) {\n    if (server === 'default') {\n      return 'https://api.stg.sappay.net/';\n    }\n  }\n  throw new Error('Could not get Base URL. Invalid environment or server.');\n}\n\nfunction createRequestHandlerFactory(\n  baseUrlProvider: (server?: Server) => string,\n  authProvider: AuthenticatorInterface<AuthParams>,\n  httpClient: HttpClient,\n  addons: ((rb: SdkRequestBuilder) => void)[],\n  xmlSerializer: XmlSerializerInterface,\n  retryConfig: RetryConfiguration\n): SdkRequestBuilderFactory {\n  const requestBuilderFactory = createRequestBuilderFactory(\n    createHttpClientAdapter(httpClient),\n    baseUrlProvider,\n    ApiError,\n    authProvider,\n    xmlSerializer,\n    retryConfig\n  );\n\n  return tap(requestBuilderFactory, ...addons);\n}\n\nfunction tap(\n  requestBuilderFactory: SdkRequestBuilderFactory,\n  ...callback: ((requestBuilder: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  return (...args) => {\n    const requestBuilder = requestBuilderFactory(...args);\n    callback.forEach((c) => c(requestBuilder));\n    return requestBuilder;\n  };\n}\n\nfunction withErrorHandlers(rb: SdkRequestBuilder) {\n  rb.defaultToError(ApiError);\n}\n\nfunction withUserAgent(rb: SdkRequestBuilder) {\n  rb.header('user-agent', USER_AGENT);\n}\n\nfunction withAuthenticationByDefault(rb: SdkRequestBuilder) {\n  rb.authenticate(false);\n}\n","/**\r\n * SAPPAYLib\r\n *\r\n */\r\n\r\nimport { object, Schema, string } from '../schema';\r\n\r\n/** checkoutPayload payload */\r\nexport interface CheckoutPayload {\r\n  invoice_id: string;\r\n  payment_processor_id: string;\r\n  customer_msisdn: string;\r\n  otp: string;\r\n}\r\n\r\nexport const checkoutPayloadSchema: Schema<CheckoutPayload> = object({\r\n  invoice_id: ['invoice_id', string()],\r\n  payment_processor_id: ['payment_processor_id', string()],\r\n  customer_msisdn: ['customer_msisdn', string()],\r\n  otp: ['otp', string()],\r\n});\r\n","/**\n * SAPPAYLib\n *\n */\n\nimport { number, object, Schema, string, unknown, optional } from '../schema';\n\n/** customer in invoice payload */\nexport interface Customer {\n  name: string;\n  email: string;\n  country: number;\n  city: number;\n  details?: unknown;\n}\n\nexport const customerSchema: Schema<Customer> = object({\n  name: ['name', string()],\n  email: ['email', string()],\n  country: ['country', number()],\n  city: ['city', number()],\n  details: ['details', optional(unknown())],\n});\n","/**\r\n * SAPPAYLib\r\n *\r\n */\r\n\r\nimport { number, object, Schema, string, lazy } from '../schema';\r\nimport { Customer, customerSchema } from './customer';\r\n\r\nenum Type {\r\n  POS = 'POS',\r\n  ECOMMERCE = 'ECOMMERCE',\r\n}\r\n\r\nexport const typeSchema: Schema<Type> = string() as Schema<Type>;\r\n\r\n/** invoice payload */\r\nexport interface Invoice {\r\n  customer: Customer;\r\n  type: Type;\r\n  amount: number;\r\n  reference_id: string;\r\n  token: string;\r\n}\r\n\r\nexport const invoiceSchema: Schema<Invoice> = object({\r\n  customer: ['customer', lazy(() => customerSchema)],\r\n  type: ['type', lazy(() => typeSchema)],\r\n  amount: ['amount', number()],\r\n  reference_id: ['reference_id', string()],\r\n  token: ['token', string()],\r\n});\r\n","/**\n * SAPPAYLib\n *\n */\n\nimport { ClientInterface, SdkRequestBuilderFactory } from '../clientInterface';\nimport { Credentials } from '../models/credentials';\n\n/** Base class for all controllers */\nexport class BaseController {\n  /** Create a request builder */\n  protected createRequest: SdkRequestBuilderFactory;\n  protected credentials: Credentials;\n\n  constructor(client: ClientInterface) {\n    this.createRequest = client.getRequestBuilderFactory();\n    this.credentials = client.getCreds();\n  }\n}\n","/**\n * SAPPAYLib\n *\n */\n\nimport { RequestOptions, ApiResponse } from '../core';\nimport {\n  CheckoutPayload,\n  checkoutPayloadSchema,\n} from '../models/checkoutPayload';\nimport { Invoice, invoiceSchema } from '../models/invoice';\nimport { TransactionStatus } from '../models/TransactionStatus';\nimport { string, unknown, lazy } from '../schema';\nimport { BaseController } from './baseController';\nrequire('dotenv').config();\n\nexport class ApiController extends BaseController {\n  accessToken: string | null = null;\n  /**\n   * Authenticate\n   *\n   * @param clientId      client_id of Merchant\n   * @param clientSecret  client_secret of Merchant\n   * @return accessToken  Response from the API call\n   */\n  async authentication(\n    credentials: {\n      clientId: string;\n      clientSecret: string;\n    } | null,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    const req = this.createRequest('POST', '/api/o/token/');\n    const mapped = req.prepareArgs({\n      clientId: [credentials?.clientId ?? this.credentials.clientId, string()],\n      clientSecret: [\n        credentials?.clientSecret ?? this.credentials.clientSecret,\n        string(),\n      ],\n    });\n    req.contentType('application/json');\n    req.text(\n      JSON.stringify({\n        client_id: mapped.clientId,\n        client_secret: mapped.clientSecret,\n        grant_type: 'password',\n        username: this.credentials.username,\n        password: this.credentials.password,\n      })\n    );\n    return req\n      .callAsJson(unknown(), requestOptions)\n      .then(\n        (res: ApiResponse<any>) =>\n          (this.accessToken = res.result.access_token as string)\n      );\n  }\n\n  /**\n   * Create Invoice\n   *\n   * @param invoicePayload payload having invoice details\n   * @return accessToken  Response from the API call\n   */\n  async createInvoice(\n    invoicePayload: Invoice,\n    requestOptions?: RequestOptions\n  ): Promise<string> {\n    const req = this.createRequest('POST', '/api/public/invoice/');\n    const mapped = req.prepareArgs({\n      invoicePayload: [invoicePayload, lazy(() => invoiceSchema)],\n    });\n    req.contentType('application/json');\n    req.header('Authorization', `Bearer ${this.accessToken}`);\n    req.text(JSON.stringify(mapped.invoicePayload));\n    /*\n    return req.call(requestOptions);\n    */\n    return req\n      .callAsJson(unknown(), requestOptions)\n      .then(\n        (res: ApiResponse<any>) =>\n          res.result.response.invoice_detail.invoice_id as string\n      );\n  }\n\n  /**\n   * Get Invoice\n   *\n   * @param invoiceId invoice id\n   * @return Invoice  Response from the API call\n   */\n  async getCheckout(invoiceId: string): Promise<any> {\n    const req = this.createRequest(\n      'GET',\n      `/api/checkout/initiate/?invoice_id=${invoiceId}`\n    );\n    req.contentType('application/json');\n    req.header('Authorization', `Bearer ${this.accessToken}`);\n    return req\n      .call()\n      .then((res: ApiResponse<any>) => JSON.parse(res.body as string));\n  }\n\n  /**\n   * Perform Checkout\n   *\n   * @param checkoutPayload payload having otp and invoice id\n   * @return accessToken  Response from the API call\n   */\n  async performCheckout(\n    checkoutPayload: CheckoutPayload,\n    requestOptions?: RequestOptions\n  ): Promise<any> {\n    const req = this.createRequest('POST', '/api/checkout/perform/');\n    const mapped = req.prepareArgs({\n      checkoutPayload: [checkoutPayload, lazy(() => checkoutPayloadSchema)],\n    });\n    req.contentType('application/json');\n    req.header('Authorization', `Bearer ${this.accessToken}`);\n    req.text(JSON.stringify(mapped.checkoutPayload));\n    return req\n      .callAsJson(unknown(), requestOptions)\n      .then((res: ApiResponse<any>) => JSON.parse(res.body as string));\n  }\n\n  /**\n   * Get Status\n   *\n   * @param invoiceId invoice id\n   * @return TransactionStatus  last transaction status against invoiceId from the API call\n   */\n  async getStatus(invoiceId: string): Promise<TransactionStatus | null> {\n    const req = this.createRequest(\n      'GET',\n      `/api/transaction_status/?invoice=${invoiceId}`\n    );\n    req.contentType('application/json');\n    req.header('Authorization', `Bearer ${this.accessToken}`);\n    return req\n      .call()\n      .then(\n        (res: ApiResponse<any>) =>\n          JSON.parse(res.body as string).response as TransactionStatus\n      )\n      .catch((err: any) => {\n        console.log(err);\n        return null;\n      });\n  }\n}\n"],"names":["accessTokenAuthenticationProvider","accessToken","requiresAuth","passThroughInterceptor","request","options","next","headers","setHeader","AUTHORIZATION_HEADER","Environment","DEFAULT_CONFIGURATION","timeout","environment","Production","DEFAULT_RETRY_CONFIG","maxNumberOfRetries","retryOnTimeout","retryInterval","maximumRetryWaitTime","backoffFactor","httpStatusCodesToRetry","httpMethodsToRetry","XmlSerialization","xmlSerialize","_rootName","_value","Error","xmlDeserialize","_xmlString","require","config","USER_AGENT","Client","_config","_retryConfig","httpClientOptions","retryConfig","_timeout","_requestBuilderFactory","createRequestHandlerFactory","server","getBaseUri","HttpClient","clientConfigOverrides","unstable_httpClientOptions","httpAgent","httpsAgent","withErrorHandlers","withUserAgent","withAuthenticationByDefault","getRequestBuilderFactory","getCreds","credentials","withConfiguration","createHttpClientAdapter","client","requestOptions","executeRequest","Development","baseUrlProvider","authProvider","httpClient","addons","xmlSerializer","requestBuilderFactory","createRequestBuilderFactory","ApiError","tap","callback","requestBuilder","forEach","c","rb","defaultToError","header","authenticate","checkoutPayloadSchema","object","invoice_id","string","payment_processor_id","customer_msisdn","otp","customerSchema","name","email","country","number","city","details","optional","unknown","Type","typeSchema","invoiceSchema","customer","lazy","type","amount","reference_id","token","BaseController","createRequest","ApiController","authentication","req","mapped","prepareArgs","clientId","clientSecret","contentType","text","JSON","stringify","client_id","client_secret","grant_type","username","password","callAsJson","then","res","result","access_token","createInvoice","invoicePayload","response","invoice_detail","getCheckout","invoiceId","call","parse","body","performCheckout","checkoutPayload","getStatus","err","console","log"],"mappings":"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"}